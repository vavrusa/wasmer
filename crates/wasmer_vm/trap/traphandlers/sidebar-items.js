initSidebarItems({"enum":[["Trap","Stores trace message with backtrace."],["UnwindReason",""]],"fn":[["catch_traps","Catches any wasm traps that happen within the execution of `closure`, returning them as a `Result`."],["catch_traps_with_result","Catches any wasm traps that happen within the execution of `closure`, returning them as a `Result`, with the closure contents."],["get_pc",""],["init_traps","This function is required to be called before any WebAssembly is entered. This will configure global state such as signal handlers to prepare the process to receive wasm traps."],["lazy_per_thread_init","A module for registering a custom alternate signal stack (sigaltstack)."],["platform_init",""],["raise_lib_trap","Raises a trap from inside library code immediately."],["raise_user_trap","Raises a user-defined trap immediately."],["reset_guard_page",""],["resume_panic","Carries a Rust panic across wasm code and resumes the panic on the other side."],["thread_stack",""],["trap_handler",""],["wasmer_call_trampoline","Call the wasm function pointed to by `callee`."],["wasmer_register_setjmp",""],["wasmer_unwind",""]],"mod":[["tls",""]],"static":[["IS_WASM_PC","Globally-set callback to determine whether a program counter is actually a wasm trap."],["PREV_SIGBUS",""],["PREV_SIGFPE",""],["PREV_SIGILL",""],["PREV_SIGSEGV",""]],"struct":[["CallThreadState","Temporary state stored on the stack which is registered in the `tls` module below for calls into wasm."]],"trait":[["TrapHandler","A package of functionality needed by `catch_traps` to figure out what to do when handling a trap."]],"type":[["TrapHandlerFn","Function which may handle custom signals while processing traps."]]});