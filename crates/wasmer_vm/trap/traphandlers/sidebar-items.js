initSidebarItems({"enum":[["Trap","Stores trace message with backtrace."],["UnwindReason",""]],"fn":[["RegisterSetjmp",""],["Unwind",""],["catch_traps","Catches any wasm traps that happen within the execution of `closure`, returning them as a `Result`."],["catch_traps_with_result","Catches any wasm traps that happen within the execution of `closure`, returning them as a `Result`, with the closure contents."],["get_pc",""],["init_traps","This function performs the low-overhead signal handler initialization that we want to do eagerly to ensure a more-deterministic global process state."],["platform_init",""],["raise_lib_trap","Raises a trap from inside library code immediately."],["raise_user_trap","Raises a user-defined trap immediately."],["real_init",""],["reset_guard_page",""],["resume_panic","Carries a Rust panic across wasm code and resumes the panic on the other side."],["setup_unix_sigaltstack","A module for registering a custom alternate signal stack (sigaltstack)."],["thread_stack",""],["trap_handler",""],["wasmer_call_trampoline","Call the wasm function pointed to by `callee`."]],"mod":[["tls",""]],"static":[["PREV_SIGBUS",""],["PREV_SIGFPE",""],["PREV_SIGILL",""],["PREV_SIGSEGV",""]],"struct":[["CallThreadState","Temporary state stored on the stack which is registered in the `tls` module below for calls into wasm."]]});