initSidebarItems({"fn":[["args_get","`args_get()`Read command-line argument data. The sizes of the buffers should match that returned by `args_sizes_get()`. Inputs:"],["args_sizes_get","`args_sizes_get()`Return command-line argument data sizes. Outputs:"],["clock_res_get","`clock_res_get()`Get the resolution of the specified clock Input:"],["clock_time_get","`clock_time_get()`Get the time of the specified clock Inputs:"],["environ_get","`environ_get()`Read environment variable data. The sizes of the buffers should match that returned by `environ_sizes_get()`. Inputs:"],["environ_sizes_get","`environ_sizes_get()`Return command-line argument data sizes. Outputs:"],["fd_advise","`fd_advise()`Advise the system about how a file will be used Inputs:"],["fd_allocate","`fd_allocate`Allocate extra space for a file descriptor Inputs:"],["fd_close","`fd_close()`Close an open file descriptor Inputs:"],["fd_datasync","`fd_datasync()`Synchronize the file data to disk Inputs:"],["fd_fdstat_get","`fd_fdstat_get()`Get metadata of a file descriptor Input:"],["fd_fdstat_set_flags","`fd_fdstat_set_flags()`Set file descriptor flags for a file descriptor Inputs:"],["fd_fdstat_set_rights","`fd_fdstat_set_rights()`Set the rights of a file descriptor.  This can only be used to remove rights Inputs:"],["fd_filestat_get","`fd_filestat_get()`Get the metadata of an open file Input:"],["fd_filestat_set_size","`fd_filestat_set_size()`Change the size of an open file, zeroing out any new bytes Inputs:"],["fd_filestat_set_times","`fd_filestat_set_times()`Set timestamp metadata on a file Inputs:"],["fd_pread","`fd_pread()`Read from the file at the given offset without updating the file cursor. This acts like a stateless version of Seek + Read Inputs:"],["fd_prestat_dir_name",""],["fd_prestat_get","`fd_prestat_get()`Get metadata about a preopened file descriptor Input:"],["fd_pwrite","`fd_pwrite()`Write to a file without adjusting its offset Inputs:"],["fd_read","`fd_read()`Read data from file descriptor Inputs:"],["fd_readdir","`fd_readdir()`Read data from directory specified by file descriptor Inputs:"],["fd_renumber","`fd_renumber()`Atomically copy file descriptor Inputs:"],["fd_seek","`fd_seek()`Update file descriptor offset Inputs:"],["fd_sync","`fd_sync()`Synchronize file and metadata to disk (TODO: expand upon what this means in our system) Inputs:"],["fd_tell","`fd_tell()`Get the offset of the file descriptor Inputs:"],["fd_write","`fd_write()`Write data to the file descriptor Inputs:"],["get_current_time_in_nanos",""],["has_rights","checks that `rights_check_set` is a subset of `rights_set`"],["path_create_directory","`path_create_directory()`Create directory at a path Inputs:"],["path_filestat_get","`path_filestat_get()`Access metadata about a file or directory Inputs:"],["path_filestat_set_times","`path_filestat_set_times()`Update time metadata on a file or directory Inputs:"],["path_link","`path_link()`Create a hard link Inputs:"],["path_open","`path_open()`Open file located at the given path Inputs:"],["path_open_dynamic",""],["path_readlink","`path_readlink()`Read the value of a symlink Inputs:"],["path_remove_directory","Returns __WASI_ENOTEMTPY if directory is not empty"],["path_rename","`path_rename()`Rename a file or directory Inputs:"],["path_symlink","`path_symlink()`Create a symlink Inputs:"],["path_unlink_file","`path_unlink_file()`Unlink a file, deleting if the number of hardlinks is 1 Inputs:"],["poll_oneoff","`poll_oneoff()`Concurrently poll for a set of events Inputs:"],["proc_exit",""],["proc_raise",""],["random_get","`random_get()`Fill buffer with high-quality random data.  This function may be slow and block Inputs:"],["read_bytes",""],["sched_yield","`sched_yield()`Yields execution of the thread"],["sock_recv",""],["sock_send",""],["sock_shutdown",""],["write_buffer_array",""],["write_bytes",""],["write_bytes_inner",""]],"mod":[["legacy","These modules provide wrappers and implementations for older version of WASI."],["types",""],["unix",""]]});